import fetch from "node-fetch";
import { writeFile } from "fs/promises";
import path from "path";
import * as _importForGlobals from "kolmafia";

import {
  isBooleanProperty,
  isFamiliarProperty,
  isLocationProperty,
  isMonsterProperty,
  isNumericOrStringProperty,
  isNumericProperty,
  isStatProperty,
} from "../src/propertyTyping";

const PROPS_FILE =
  "https://sourceforge.net/p/kolmafia/code/HEAD/tree/src/data/defaults.txt?format=raw";

const TYPES_FILE = path.join(__dirname, "../src/propertyTypes.ts")

async function main() {
  const response = await fetch(PROPS_FILE);
  const text = await response.text();
  const props = text.split("\n");

  const propTypes: { [key: string]: string[] } = {
    BooleanProperty: [],
    NumericProperty: [],
    MonsterProperty: [],
    LocationProperty: [],
    StringProperty: [],
    NumericOrStringProperty: [],
    FamiliarProperty: [],
    StatProperty: [],
  };

  for (const prop of props) {
    const [, property, defaultValue] = prop.split("\t");
    if (!property) continue;

    if (isMonsterProperty(property)) {
      propTypes.MonsterProperty.push(property);
    } else if (isLocationProperty(property)) {
      propTypes.LocationProperty.push(property);
    } else if (isStatProperty(property)) {
      propTypes.StatProperty.push(property);
    } else if (isFamiliarProperty(property)) {
      propTypes.FamiliarProperty.push(property);
    } else if (isNumericOrStringProperty(property)) {
      propTypes.NumericOrStringProperty.push(property);
    } else if (!defaultValue) {
      propTypes.StringProperty.push(property);
    } else if (isBooleanProperty(property, defaultValue)) {
      propTypes.BooleanProperty.push(property);
    } else if (isNumericProperty(property, defaultValue)) {
      propTypes.NumericProperty.push(property);
    } else {
      propTypes.StringProperty.push(property);
    }
  }

  let contents = `/** THIS FILE IS AUTOMATICALLY GENERATED. See tools/parseDefaultProperties.ts for more information */\n`;

  Object.entries(propTypes).forEach(([type, values]) => {
    console.log(`Storing ${values.length} props of type ${type}`);
    contents += `export type ${type} = ${values.map((v) => `"${v}"`).join(" | ")};\n`;
  });

  await writeFile(TYPES_FILE, contents);
}

main();
